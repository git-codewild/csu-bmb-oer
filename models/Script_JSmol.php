<?php

namespace codewild\csubmboer\models;

use codewild\csubmboer\core\db\DbModel;

class Script_JSmol extends DbModel
{
    static public function tableName(): string
    {
        return 'scripts_jsmol';
    }

    public string $title = '';
    public ?string $vars = null;
    public ?string $config = null;
    public ?string $display = null;
    public ?string $labels = null;
    public ?string $camera = null;
    public ?string $functions = null;
    public string $filesList = '';

    public array $dataNavs = [];

    public function __construct()
    {
        $this->dataNavs = DataNav::findMany(['scriptId' => $this->id], 'n');
        $this->filesList = implode(', ', array_column(array_column($this->dataNavs, 'file'), 'title'));

        foreach ($this->attributes() as $attr) {
            if (property_exists($this, $attr)) {
                $this->{$attr} = htmlspecialchars_decode($this->$attr);
            }
        }
    }

    public static function attributes(): array
    {
        $output = parent::attributes();
        array_push($output, 'title', 'vars', 'config', 'display', 'labels', 'camera', 'functions');
        return $output;
    }

    public static function create(string $articleId){
        $jsmol = new self();
        $jsmol->title = 'JSmol';

        if ($jsmol->save()){
            $id = self::lastInsertId();
            $defaultDataNav = new DataNav(DataFile::DEFAULT_UUID);
            $defaultDataNav->scriptId = $id;
            $defaultDataNav->n = 1;

            return (Slide::create(Slide::TYPE_JSMOL, self::lastInsertId(), $articleId) && $defaultDataNav->save());
        }
        return false;
    }

    public function update(?array $keys = null)
    {
        $attributes = is_null($keys) ? $this->attributes() : $keys;

        foreach ($attributes as $attribute){
            $this->{$attribute} = htmlspecialchars($this->{$attribute});
        }

        return parent::update($keys); // TODO: Change the autogenerated stub
    }

    public function delete()
    {
        $dataNavs = DataNav::findMany(['scriptId' => $this->id]);
        foreach ($dataNavs as $dataNav){
            if (empty(DataNav::findMany(['dataFileId' => $dataNav->dataFileId]))){
                $dataNav->delete();
                $dataFile = DataFile::findOne(['id' => $dataNav->dataFileId]);
                if (is_object($dataFile) && $dataNav->dataFileId !== DataFile::DEFAULT_UUID){
                    $dataFile->delete();
                }
            } else {
                $dataNav->delete();
            }
        }

        return parent::delete();
    }

    public function push(array &$array){
        $r = (array) $this;
        $script = preg_replace("/\r|\n/", "", html_entity_decode(htmlspecialchars( json_encode($r)) ) );
        array_push($array,
            "<script src='/lib/jsmol/JSmol.min.js'></script>",
            "<script src='/lib/jsmol/vars.js'></script>",
            "<script src='/lib/jsmol/methods.js'></script>",
            "<script src='/lib/jsmol/run.js'></script>",
            "<script type='text/javascript'>
                script = $script;
                $.getScript('/lib/jsmol/config.js').done(function() {
                    var setIntervalID = setInterval(function() {
                        if (window.jsmolApplet){
                            clearInterval(setIntervalID);
                        }
                    }, 300);
                });
            </script>");
    }
}
