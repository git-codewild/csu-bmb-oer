<?php

namespace codewild\csubmboer\models;

use codewild\csubmboer\core\db\DbModel;
use codewild\csubmboer\core\exception\DbException;

class Module extends DbModel
{
    static public function tableName(): string
    {
        return 'modules';
    }

    public string $path = '';
    public string $title = '';
    public ?string $subtitle = null;
    public ?string $keywords = null;
    public ?string $created_at = null;
    public ?string $created_by = null;
    public string $createdBy_displayName;

    public array $versions = [];
    public int $version_count = 0;

    public function __construct()
    {
        if (!is_null($this->created_by)){
            $this->createdBy_displayName = User::findOne(['id' => $this->created_by])->getDisplayName() ?? 'Undefined';
        }
    }

    public static function attributes(): array
    {
        return [
          'path', 'title', 'subtitle', 'keywords', 'created_at', 'created_by'
        ];
    }

    public function labels(): array{
        return [
            'path' => 'URL',
            'title' => 'Title',
            'subtitle' => 'Subtitle',
            'keywords' => 'Keywords (comma-separated)',
            'created_at' => 'Created At',
            'createdBy_displayName' => 'Created By',
            'version_count' => 'No. of Versions'
        ];
    }
    public function rules(): array{
        return [
            'path' => [self::RULE_REQUIRED, self::RULE_UNIQUE, [self::RULE_REGEX, 'regex' => '/\w+(-\w+)?/']],
            'title' => [self::RULE_REQUIRED, [self::RULE_MAX, 'max' => 64]],
            'subtitle' => [[self::RULE_MAX, 'max' => 64]],
            'keywords' => [[self::RULE_MAX, 'max' => 1024]],
        ];
    }

    public function delete()
    {
        if (empty($this->versions)){
            $this->getVersions();
        }
        foreach ($this->versions as $version){
            try {
                $version->delete();
            }
            catch (\PDOException $e) {
                throw new DbException($e->getMessage());
            }
        }

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function getVersions(){
        $this->versions = ModuleVersion::findMany(['moduleId' => $this->id]);
        $this->version_count = count($this->versions);
    }

    public static function getLatestVersion(string $path)
    {
        $module = self::findOne(['path' => $path]);
        $module->getVersions();
        $version = current($module->versions);
        if (!$version){
            $version = new ModuleVersion($module->id);
            $version->created_by = $module->created_by;
            $version->save();
        }
        return $version;
    }

}

?>
